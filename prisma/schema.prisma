// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../lib/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model DisparoLog {
  id           String   @id @default(uuid())
  createdAt    DateTime @default(now()) // timestamp
  updatedAt    DateTime @updatedAt
  type         String // Ex: success, error, warning, info, text, image, etc
  status       String // Ex: sucesso, erro, pendente, enviando
  instance     String // Nome ou ID da instância utilizada
  numero       String // Número de destino
  mensagem     String // Mensagem principal do log (exibida na tabela)
  payload      Json // Dados enviados (mensagem, arquivo, etc)
  response     Json? // Resposta da API/disparo
  error        String? // Mensagem de erro, se houver
  userId       String? // Usuário responsável pelo disparo (se aplicável)
  userName     String? // Nome do usuário
  userIp       String? // IP do usuário
  module       String? // Módulo/origem do disparo (ex: xls-dispatch, mass-dispatch)
  messageBlock String? // Identificador do bloco de mensagem (se aplicável)
  campaignId   String? // ID de campanha, se for disparo em massa
  extra        Json? // Qualquer informação adicional
}

model Instance {
  id                  String    @id @default(uuid())
  name                String
  userId              String // id do usuário Clerk
  connectionStatus    String? // open, close, connecting
  profileName         String? // Nome do perfil do WhatsApp
  profilePicUrl       String? // URL da foto do perfil
  number              String? // Número do WhatsApp
  token               String? // Token de autenticação
  disconnectionReason String? // Motivo da desconexão
  lastConnectionAt    DateTime? // Última vez que conectou
  lastDisconnectionAt DateTime? // Última vez que desconectou
  createdAt           DateTime  @default(now())
  updatedAt           DateTime  @updatedAt
}

model SystemConfig {
  id             String   @id @default("global") // ID fixo "global" - apenas uma linha
  logoUrl        String? // URL do logo personalizado
  logoBase64     String? // Logo armazenado como base64 (alternativa)
  systemName     String   @default("NEXUS") // Nome do sistema
  systemSubtitle String   @default("WhatsApp Manager") // Subtítulo/descrição
  primaryColor   String   @default("#10b981") // Cor primária (emerald-500)
  secondaryColor String   @default("#06b6d4") // Cor secundária (cyan-500)
  favicon        String? // URL do favicon personalizado
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
}

model Campaign {
  id             String           @id @default(uuid())
  name           String           // Nome da campanha
  description    String?          // Descrição opcional
  instance       String           // Nome da instância a ser utilizada
  status         CampaignStatus   @default(DRAFT) // Status da campanha
  scheduledAt    DateTime?        // Quando executar (null = imediato)
  startedAt      DateTime?        // Quando iniciou a execução
  completedAt    DateTime?        // Quando terminou
  userId         String           // ID do usuário (Clerk)
  totalContacts  Int              @default(0) // Total de contatos
  sentCount      Int              @default(0) // Quantidade enviada
  deliveredCount Int              @default(0) // Quantidade entregue
  failedCount    Int              @default(0) // Quantidade falhada
  messageBlocks  Json             // Blocos de mensagem (texto, imagem, etc)
  contacts       Json             // Lista de contatos (números)
  settings       Json?            // Configurações específicas da campanha
  createdAt      DateTime         @default(now())
  updatedAt      DateTime         @updatedAt
  
  // Relação com logs
  logs           CampaignExecution[]
}

model CampaignExecution {
  id          String   @id @default(uuid())
  campaignId  String   // ID da campanha
  blockIndex  Int      // Índice do bloco de mensagem
  contact     String   // Número do contato
  status      String   // Status do envio (pending, sending, sent, delivered, failed)
  attemptedAt DateTime? // Quando foi tentado o envio
  sentAt      DateTime? // Quando foi enviado
  error       String?  // Erro, se houver
  response    Json?    // Resposta da API
  createdAt   DateTime @default(now())
  
  campaign Campaign @relation(fields: [campaignId], references: [id], onDelete: Cascade)
}

enum CampaignStatus {
  DRAFT      // Rascunho
  SCHEDULED  // Agendada
  RUNNING    // Executando
  PAUSED     // Pausada
  COMPLETED  // Concluída
  CANCELLED  // Cancelada
}
